"""
Convenience wrappers around KBase utility mocks
"""

from mock import patch
from uuid import uuid4


patchers = []  # type: list

# Name of the ENV var that can be used to toggle on/off mocking
env_toggle = 'MOCK_CLIENTS'


def stop_mocks():
    """ Stop all mocks that have been generated by any function in this modul """
    while patchers:
        p = patchers.pop()
        p.stop()


def mock_assembly_utils(paths):
    """
    Mock the methods for AssemblyUtil
    Pass in a list of paths to fasta files on scratch
    """
    from AssemblyUtil.AssemblyUtilClient import AssemblyUtil
    # Create mappings from pathnames to fake references and fake references back to pathnames
    path_to_ref = {}
    ref_to_path = {}
    for p in paths:
        ref = str(uuid4())
        path_to_ref[p] = ref
        ref_to_path[ref] = p

    def mock_save_assembly_from_fasta(data):
        return path_to_ref[data['file']['path']]

    def mock_get_assembly_as_fasta(data):
        return {'path': ref_to_path[data['ref']]}

    # Mock AssemblyUtil.save_assembly_from_fasta
    patch_save_asm = patch.object(AssemblyUtil, 'save_assembly_from_fasta')
    patchers.append(patch_save_asm)
    save_asm = patch_save_asm.start()
    save_asm.side_effect = mock_save_assembly_from_fasta
    # Mock AssemblyUtil.get_assembly_as_fasta
    patch_get_asm = patch.object(AssemblyUtil, 'get_assembly_as_fasta')
    patchers.append(patch_get_asm)
    get_asm = patch_get_asm.start()
    get_asm.side_effect = mock_get_assembly_as_fasta


def mock_kbase_report():
    """ Mock the methods for KBaseReport """
    from KBaseReport.KBaseReportClient import KBaseReport
    # Mock KBaseReport.create_extended_report
    patch_create_ext = patch.object(KBaseReport, 'create_extended_report')
    patchers.append(patch_create_ext)
    create_ext = patch_create_ext.start()
    create_ext.return_value = {'name': 'x', 'ref': 'x'}
    # Mock KBaseReport.create
    patch_create = patch.object(KBaseReport, 'create')
    patchers.append(patch_create)
    create = patch_create.start()
    create.return_value = {'name': 'x', 'ref': 'x'}
